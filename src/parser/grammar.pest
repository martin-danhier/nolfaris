// ==================
// == NoKe Grammar ==
// ==================
// This file contains the grammar of the NoKe language.
//
// Note: this grammar is volontarily too permissive.
// For example, this is parsed correctly :
// fun name(variable: 4+4, i: int = 0, surname) {}
//
// This allows the parser to catch a minimum of errors, and defer most of them to
// the semantic analysis, which doesn't stop if an error is found.

// Define whitespace and comment. These will be skipped.
WHITESPACE = _{ " " | "\r\n" | "\n" | "\r" }
COMMENT = _{
    ("//" ~ ( !"\n" ~ ANY)* ~ ("\n" | EOI))
    | ("/*" ~ (!"*/" ~ ANY)* ~ "*/" )
}

// == Global rule ==

file = { SOI ~ structural_element* ~ EOI }

// =================
// == Expressions ==
// =================

expression = { binary_operation }

binary_operation = { unary_operation ~ (binary_operator ~ unary_operation)* }

unary_operation = {
    (prefix_operator)? ~ term ~ (postfix_operator)?
}

// Subset of expression supported in types
type_expression = { type_unary_operation ~ (type_binary_operator ~ type_unary_operation)* }
type_unary_operation = { identifier ~ (type_expression_params)? }
type_expression_list = { type_expression ~ ("," ~ type_expression)* }
type_expression_params = { "<" ~ type_expression_list ~ ">" }


term = {float | integer | bool | char | raw_string | string | identifier  | list_access | "(" ~ expression ~ ")"}


// == Literals ==

// Integers
dec_integer = @{ ASCII_DIGIT+ }
hex_integer = @{ ASCII_HEX_DIGIT+ }
bin_integer = @{ ASCII_BIN_DIGIT+ }
integer = ${ "0x" ~ hex_integer | "0b" ~ bin_integer | dec_integer }

// Floats
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

// Booleans
bool = { "true" | "false" }

// Char

character = @{
    // Normal character
    !("\"" | "\\") ~ ANY
    // Escape sequence
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    // Unicode escape sequence
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

char = ${ "'" ~ character ~ "'" }

// Strings

inner_string = ${ character* }

string = ${ "\"" ~ inner_string ~ "\"" }

inner_raw_string = @{ (!("\"" ~ PEEK) ~ ANY)* }

raw_string = ${ "r" ~ PUSH("#"*) ~ "\"" ~ inner_raw_string ~  "\"" ~ POP }

// Function call

expression_list = {
    expression ~ ("," ~ expression)*
}

// == Operators ==

// Binary
plus = { "+" }
times = { "*" }
minus = { "-" }
div = { "/" }
exponent = { "**" }
modulo = { "%" }
or = { "or" }
and = { "and" }
less_or_equal_to = { "<=" }
greater_or_equal_to = { ">=" }
less_than = { "<" }
greater_than = { ">" }
equals = { "==" }
different = { "!=" }
nav = { "." }

// Subset of binary operators that are allowed in type expressions
type_binary_operator = _{
    nav
}

binary_operator = _{
    exponent
    | times
    | div
    | modulo
    | plus
    | minus
    | less_or_equal_to
    | greater_or_equal_to
    | less_than
    | greater_than
    | or
    | and
    | equals
    | different
    | nav
}

// Unary
negation = _{ "-" }
not = _{ "not" }
increment = _{ "++" }
decrement = _{ "--" }
type_of = _{"typeof"}
call = { ("<" ~ type_expression_list ~ ">")? ~ "(" ~ expression_list? ~ ")" }
list_access = { "[" ~ expression_list? ~ "]" }

prefix_operator = {
    decrement
    | negation
    | increment
    | not
    | type_of
}

postfix_operator = {
    decrement
    | increment
    | call
    | list_access
}

// Identifier

identifier = @{
    !(
    // To check strict equality, first check if it begins as a reserved keyword...
    ("not" | "or" | "and" | "typeof" | "true" | "false" | "let" | "mut" | "if" | "enum"
    | "else" | "for" | "while" | "in" | "module" | "fun" | "return" | "import" | "pub" | "mod")
      // Then check that the word doesn't continue afterwards.
      // That prevent "integer" from matching because "in" is reserved
      ~ !(ASCII_ALPHANUMERIC | "_")
    ) ~
    (ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" )*
}

// ================
// == Statements ==
// ================

// Add it to a specific rule in order to get it in the error messages when it is missing
semicolon = { ";" }

statement = { (return_statement | affectation | left_hand_side ) ~ semicolon? | block | branch | for_loop | while_loop }
// Variant with unsupported char support
checked_statement = { statement  | err_unsupported_char}

// affectations

// What goes to the left of the =
// An expression is too generic, a lot of matches will be invalid
// They will be handled in the semantic analysis

mutable = { "let" }
immutable = { "const" }

left_hand_side = {
    declaration
    | expression
}

// Declaration without prefix and with required type, used in functions
param_declaration = { identifier ~ ":" ~ type_expression }
param_default_value = { identifier ~ (":" ~ type_expression)? ~ affectation_operator ~ expression }
param = { param_default_value | param_declaration }

// Variable declaration, with prefix, and optional type
declaration = { ( mutable | immutable ) ~ identifier ~ (":" ~ type_expression)? }


affectation_operator = { "=" | "+=" | "-=" | "*=" | "/=" | "%=" }
affectation = { left_hand_side ~ affectation_operator ~ expression }

// Return statement

return_statement = { "return" ~ expression }

// Block

// A block is a series of statements. Ex: the body of a loop

op_curly_bracket = { "{" }
cl_curly_bracket = { "}" }

block = { op_curly_bracket ~ checked_statement* ~ cl_curly_bracket? }

// Branches

branch = { "if" ~ "(" ~ expression ~ ")" ~ statement ~ ( "else" ~ statement )? }

// For loop

for_loop = { "for" ~ "(" ~ (
    affectation ~ semicolon ~ expression ~ semicolon ~  (affectation | expression)
    | declaration ~ "in" ~ expression
    ) ~ ")" ~ statement }

// While loop

while_loop = { "while" ~ "(" ~ expression ~ ")" ~ statement }

// ================
// == Structural ==
// ================

// Structural elements are the things that are neither expressions nor statements,
// but are used to structure the code in different parts.
// It includes functions, modules, and files (since files are modules)

structural_element = { import | struct_def | enumeration | function | module | statement | err_unsupported_char }

// == Module ==
// A module is a structural element containing other structural elements.
// For example, a module may contain other modules and some functions.
// A file is an implicit module

module = { "module" ~ identifier ~ "{" ~ structural_element* ~ "}" }

// == Function ==
// A function is ... well I hope that you know

function_def_parameters = { param ~ ( "," ~ param)* }

public = { "pub" }

function = { public? ~ "fun" ~ identifier ~ ("<" ~ type_expression_list ~ ">" )? ~ "(" ~ function_def_parameters? ~ ")" ~ ( "->" ~ expression )? ~ block }

// == Import ==
// A import is a structural element that references a file or a specific content of a file.
// It can be used to link multiple files together.

import = { "import" ~ expression ~ semicolon }

// == Struct ==
// A struct is a set of grouped values

struct_def = { public? ~ "struct"  ~ identifier ~ ("<" ~ type_expression_list ~ ">" )? ~ "{" ~ function_def_parameters? ~ ","? ~ "}" }

// == Enum ==
// An enum is a set of named symbolic values

enumeration_variants = { identifier ~ ("," ~ identifier)* ~ ","? }
enumeration = { public? ~ "enum" ~ identifier ~ "{" ~ enumeration_variants? ~ "}"}

// == Error handling ==

// The parser crashes when something is not matched.
// When it occurs, it doesn't return the parse output, which means that only that error will be shown.
// More, the parser may not have enough data to provide useful hints and error messages.
// Thus, the following patterns are parsed in order to prevent the parsing from crashing.
// They will be rejected in a later stage of compilation.

err_unsupported_char = {
    !(ASCII_ALPHANUMERIC | "{" | "}" | "(" | ")" | ";" | binary_operator | prefix_operator | postfix_operator ) ~
    ANY
}